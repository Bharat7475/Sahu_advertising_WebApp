@model QuatationPagedViewModel

<section>
    <div class="container-fluid my-2">
        <div class=" p-2">
            <div class="row align-items-center">
                <div class="col-12 col-md-5">
                    <h3 class="text-primary pt-lg-2 pl-lg-4">Quotation </h3>
                </div>
                <div class="col-12 col-md-7">
                    <div class="d-flex flex-column flex-md-row justify-content-md-end align-items-md-center">
                        <input type="search" id="searchQuery" autocomplete="off" placeholder="Search.." class="ml-4 rounded-pill p-2 ml-2 btn-outline-red" style="border:1px solid " value="@Model.SearchQuery" oninput="searchCustomers()" />
                    </div>
                </div>

            </div>
        </div>
    </div>
    <!-- Razor condition to focus the search input when the query is not empty -->
    @if (!string.IsNullOrEmpty(Model.SearchQuery))
    {
        <script>
            $(document).ready(function () {
                var searchInput = $('#searchQuery');
                searchInput.focus();

                // Set the cursor at the end of the input field
                var val = searchInput.val();
                searchInput.val('').val(val); // Clears and sets the value back to move the cursor to the end
            });
        </script>
    }


    <div class="col-lg-12 grid-margin stretch-card">
        <div class="card">
            <div class="container-fluid p-2">
                  <!-- Search and Row Quantity Section -->
            <div class="row mb-2">
               
                <div class="col-md-1">
                        <select id="rowQuantity" class="form-control" onchange="updateRowQuantity()" style="outline: 1px solid #b4b4b4;color: #050000;">
                            @if (Model.PageSize == 5)
                            {
                                <option value="5" selected>5</option>
                            }
                            else
                            {
                                <option value="5">5</option>
                            }

                             @if (Model.PageSize == 10)
                            {
                                <option value="10" selected>10</option>
                            }
                            else
                            {
                                <option value="10">10</option>
                            }

                             @if (Model.PageSize == 20)
                            {
                                <option value="20" selected>20</option>
                            }
                            else
                            {
                                <option value="20">20</option>
                            }

                            @if (Model.PageSize == 50)
                            {
                                <option value="50" selected>50</option>
                            }
                            else
                            {
                                <option value="50">50</option>
                            }
                            
                       
                    </select>
                </div>
             </div>

                <div class="table-responsive mt-4">
                    <table class="table table-striped" id="quotationsTable">
                        <thead>
                            <tr class="text-center">

                              
                                <th>Quotation No</th>
                                <th>Date</th>
                                <th>Customer Name</th>
                                <th>Total Hoarding</th>
                                <th>Add Campaign</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.QuatationViewModel)
                            {
                                    <tr class="text-center" id="row-@item.Id">
                                      
                                        <td>@item.QuotationNumber</td>
                                        <td>@item.CreatedAt?.ToString("yyyy-MM-dd")</td>
                                        <td>@item.BusinessName</td>
                                        <td>@item.Totalhoarding</td> <!-- Replace with actual total hoardings -->
                                        <td>

                                        <a class="btn btn-info p-2" onclick="fetchData3('@item.Id')">
                                            <i class="mdi mdi-plus">  </i>
                                        </a>
                                       


                                        </td>
                                        <td class="text-center">
                                        <a class=" btn btn-info p-2" asp-action="ViewQuotation" asp-route-id="@item.Id">
                                            <i class="mdi mdi-eye">  </i>
                                        </a>
                                          |
                                        <button type="button" class="btn btn-danger p-2" data-toggle="modal" data-target="#deleteModal" onclick="getId('@item.Id')">
                                            <i class="mdi mdi-delete"></i>
                                        </button>

                                        </td>
                                    </tr>
                            }
                        </tbody>
                    </table>
                </div>
                 <a id="hiddenRedirectLink" href="/SelectedHoarding" style="display:none;"></a>
                <!-- Pagination Controls -->
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-end">
                        @if (Model.CurrentPage > 1)
                        {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)">Previous</a>
                                </li>
                        }

                        @for (var i = 1; i <= Model.TotalPages; i++)
                        {
                                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@i">@i</a>
                                </li>
                        }

                        @if (Model.CurrentPage < Model.TotalPages)
                        {
                                <li class="page-item">
                                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)">Next</a>
                                </li>
                        }
                    </ul>
                </nav>
            </div>
        </div>
    </div>

       
            <!-- Delete Modal -->
            <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content" style="border-radius:20px;">
                        <div class="modal-header">
                            <h5 class="modal-title text-primary" id="deleteModalLabel">Delete</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p class="text-muted text-center mt-2">Are you sure you want to delete this quotation?</p>
                            <input type="hidden" id="qid" /> <!-- Corrected the input field to have the 'id' attribute -->
                        </div>
                        <div class="modal-footer justify-content-center">
                            <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>




            <script>
    function searchCustomers() {
        var searchQuery = document.getElementById('searchQuery').value;
        var pageSize = document.getElementById('rowQuantity').value;
            window.location.href = `/Quatation/Index?searchQuery=${searchQuery}&pageNumber=1&pageSize=${pageSize}`;
    }

    function updateRowQuantity() {
        var pageSize = document.getElementById('rowQuantity').value;
        var searchQuery = document.getElementById('searchQuery').value;
            window.location.href = `/Quatation/Index?searchQuery=${searchQuery}&pageNumber=1&pageSize=${pageSize}`;
    }

    $(document).ready(function() {

    $('#searchInput').on('input', function() {
        let searchValue = $(this).val();
        if (searchValue.length >= 2) { // Trigger search after 2 characters
            $.ajax({
                url: '/search',
                type: 'GET',
                data: { name: searchValue },
                success: function(data) {
                    // Handle the search results here
                    console.log(data); // For example, log the results
                    // Update the UI with the search results
                },
                error: function(error) {
                    console.error('Error fetching search results:', error);
                }
            });
        }
    });
});

</script>
      
    <script>
        
        function ViewQuotation(id) 
        {
            // Perform any additional logic if needed
            window.location.href = '/Quotation/ViewQuotation/' + id;
        }
       function fetchData3(id) 
       {
            // Store the ID in sessionStorage
            sessionStorage.setItem('selectedHoardingId', id);

            // Verify that the ID is set correctly
            console.log("ID set in sessionStorage: " + sessionStorage.getItem('selectedHoardingId'));

            // Trigger a click event on the hidden link to redirect
            document.getElementById('hiddenRedirectLink').click();
        }


        function getId(quotationId) {
            console.log("Id : " + quotationId);
            $('#qid').val(quotationId); // Correctly sets the hidden input value
        }

        // Handle delete confirmation
        $('#confirmDeleteBtn').on('click', function () {
            const quotationId = $('#qid').val(); // Retrieve the quotationId from the hidden input
            $.ajax({
                url: '/Quatation/DeleteQuotation',
                type: 'DELETE', // Use DELETE since your controller is expecting a DELETE request
                data: { id: quotationId },
                success: function (result) {
                    if (result.success) {
                        $('#deleteModal').modal('hide');
                        location.reload(); // Refresh the page or handle the DOM manipulation
                    } else {
                        alert(result.message); // Show error message
                    }
                },
                error: function () {
                    alert('Error deleting quotation. Please try again.');
                }
            });
        });




        function ViewQuotation(id) {
            // Perform any additional logic if needed
            window.location.href = '/Quotation/ViewQuotation/' + id;
        }



        $('#CreateQuotation').on('click', function () {
            $.ajax({
                url: '/Dashboard/GetCustomerDetails',
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        var customerDropdown = $('#customerName');
                        customerDropdown.empty(); // Clear existing options
                        customerDropdown.append('<option value="">Select Customer</option>'); // Default option

                        $.each(response.model, function (index, data) {
                            customerDropdown.append('<option value="' + data.id + '">' + data.customerName + '</option>');
                        });

                        // Open the Add Quotation modal here if needed
                        $('#addQuotationModal').modal('show');
                    } else {
                        console.error('Failed to load customer details:', response.Message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching customer details:', error);
                }
            });
        });


        $('#customerName').on('change', function () {
            var customerId = $(this).val();

            if (customerId) {
                $.ajax({
                    url: '/Dashboard/GetCustomerById',
                    type: 'GET',
                    data: { id: customerId },
                    success: function (response) {
                        if (response.success) {
                            var customer = response.customer;
                            emptycustomer();

                        } else {
                            console.error('Failed to load customer details:', response.Message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching customer details:', error);
                    }
                });
            }
        });


        function emptycustomer() {

            // Set the form fields with the customer's data
            $('#city').val(customer.City || '');
            $('#area').val(customer.Area || '');
            $('#location').val(customer.Location || '');
            $('#width').val(customer.Width || '');
            $('#height').val(customer.Height || '');
            $('#rate').val(customer.Rate || '');
            $('#vendorAmt').val(customer.VendorAmt || '');
            $('#marginAmt').val(customer.MarginAmt || '');

            // Optionally, handle other fields if needed
            // ...
        }

        $('#customerName').on('select', function () {
            $.ajax({
                url: '/Dashboard/GetCustomerDetails',
                type: 'GET',
                success: function (response) {
                    if (response.success) {
                        $.each(response.model, function (index, data) {

                        });

                        // Open the Add Quotation modal here if needed
                        $('#addQuotationModal').modal('show');
                    } else {
                        console.error('Failed to load customer details:', response.Message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching customer details:', error);
                }
            });
        });



    </script>


</section>
